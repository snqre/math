boiler::bundle!("src/st_q");

use crate::common::tr_branded::*;
use crate::common::tr_sign_introspection::*;
use core::ops::Add;
use core::ops::Sub;
use core::ops::Mul;
use core::ops::Div;
use core::ops::Rem;
use core::cmp::Ordering;
use num_traits::int::PrimInt;
use thiserror::Error;

#[derive(Debug)]
#[derive(Clone)]
#[derive(Copy)]
pub struct Q<const A: u8, B: PrimInt> where CheckPrecision<A>: IsPrecision {
    pub(super) v: B,
}

boiler::expose!(
    constant,
    enu_error,
    ext_add,
    ext_branded,
    ext_cap_introspection,
    ext_cast,
    ext_constructor_int,
    ext_constructor,
    ext_div,
    ext_eq,
    ext_log,
    ext_mul,
    ext_muldiv,
    ext_ord,
    ext_partial_eq,
    ext_partial_ord,
    ext_prime_introspection,
    ext_rem,
    ext_sign_introspection,
    ext_sqrt,
    ext_sub,
    ext_to_f32,
    ext_to_f64,
    ext_to_i8,
    ext_to_i16,
    ext_to_i32,
    ext_to_i64,
    ext_to_i128,
    ext_to_isize,
    ext_to_u8,
    ext_to_u16,
    ext_to_u32,
    ext_to_u64,
    ext_to_u128,
    ext_to_usize,
    ext_trig_reciprocal,
    ext_trig,
    ext_trunc,
    ext_try_from_i8,
    ext_try_from_i16,
    ext_try_from_i32,
    ext_try_from_i64,
    ext_try_from_i128,
    ext_try_from_isize,
    ext_try_from_u8,
    ext_try_from_u16,
    ext_try_from_u32,
    ext_try_from_u64,
    ext_try_from_u128,
    ext_try_from_usize,
    precision_validation,
    t_q1,
    t_q2,
    t_q3,
    t_q4,
    t_q5,
    t_q6,
    t_q7,
    t_q8,
    t_q9,
    t_q10,
    t_q11,
    t_q12,
    t_q13,
    t_q14,
    t_q15,
    t_q16,
    t_q17,
    t_q18,
    t_q19,
    t_q20,
    t_q21,
    t_q22,
    t_q23,
    t_q24,
    t_q25,
    t_q26,
    t_q27,
    t_q28,
    t_q29,
    t_q30,
    t_q31,
    t_q32,
    t_q33,
    t_q34,
    t_q35,
    t_q36,
    t_q37,
    t_q38,
    t_result,
);

boiler::expose!(
    t_q1i8,
    t_q1i16,
    t_q1i32,
    t_q1i64,
    t_q1i128,
    t_q1u8,
    t_q1u16,
    t_q1u32,
    t_q1u64,
    t_q1u128,
    t_q2i8,
    t_q2i16,
    t_q2i32,
    t_q2i64,
    t_q2i128,
    t_q2u8,
    t_q2u16,
    t_q2u32,
    t_q2u64,
    t_q2u128,
    t_q3i16,
    t_q3i32,
    t_q3i64,
    t_q3i128,
    t_q3u16,
    t_q3u32,
    t_q3u64,
    t_q3u128,
    t_q4i16,
    t_q4i32,
    t_q4i64,
    t_q4i128,
    t_q4u16,
    t_q4u32,
    t_q4u64,
    t_q4u128,
    t_q5i32,
    t_q5i64,
    t_q5i128,
    t_q5u32,
    t_q5u64,
    t_q5u128,
    t_q6i32,
    t_q6i64,
    t_q6i128,
    t_q6u32,
    t_q6u64,
    t_q6u128,
    t_q7i32,
    t_q7i64,
    t_q7i128,
    t_q7u32,
    t_q7u64,
    t_q7u128,
    t_q8i32,
    t_q8i64,
    t_q8i128,
    t_q8u32,
    t_q8u64,
    t_q8u128,
    t_q9i32,
    t_q9i64,
    t_q9i128,
    t_q9u32,
    t_q9u64,
    t_q9u128,
    t_q10i64,
    t_q10i128,
    t_q10u64,
    t_q10u128,
    t_q11i64,
    t_q11i128,
    t_q11u64,
    t_q11u128,
    t_q12i64,
    t_q12i128,
    t_q12u64,
    t_q12u128,
    t_q13i64,
    t_q13i128,
    t_q13u64,
    t_q13u128,
    t_q14i64,
    t_q14i128,
    t_q14u64,
    t_q14u128,
    t_q15i64,
    t_q15i128,
    t_q15u64,
    t_q15u128,
    t_q16i64,
    t_q16i128,
    t_q16u64,
    t_q16u128,
    t_q17i64,
    t_q17i128,
    t_q17u64,
    t_q17u128,
    t_q18i64,
    t_q18i128,
    t_q18u64,
    t_q18u128,
    t_q19i128,
    t_q19u128,
    t_q20i128,
    t_q20u128,
    t_q21i128,
    t_q21u128,
    t_q22i128,
    t_q22u128,
    t_q23i128,
    t_q23u128,
    t_q24i128,
    t_q24u128,
    t_q25i128,
    t_q25u128,
    t_q26i128,
    t_q26u128,
    t_q27i128,
    t_q27u128,
    t_q28i128,
    t_q28u128,
    t_q29i128,
    t_q29u128,
    t_q30i128,
    t_q31u128,
    t_q32i128,
    t_q32u128,
    t_q33i128,
    t_q33u128,
    t_q34i128,
    t_q34u128,
    t_q35i128,
    t_q35u128,
    t_q36i128,
    t_q36u128,
    t_q37i128,
    t_q37u128,
    t_q38i128,
    t_q38u128,
);